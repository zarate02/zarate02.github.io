<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-08T17:01:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zaimy</title><subtitle>Development And Investment Blog</subtitle><author><name>zaimy</name></author><entry><title type="html">Nestjs - 1. 프로젝트 생성과 구성</title><link href="http://localhost:4000/nest-001" rel="alternate" type="text/html" title="Nestjs - 1. 프로젝트 생성과 구성" /><published>2022-06-08T00:00:00+09:00</published><updated>2022-06-08T00:00:00+09:00</updated><id>http://localhost:4000/nest-001</id><content type="html" xml:base="http://localhost:4000/nest-001"><![CDATA[<h1 id="1-프로젝트-생성과-구성">1. 프로젝트 생성과 구성</h1>
<hr />
<h2 id="1-프로젝트-생성">1) 프로젝트 생성</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm i -g @nestjs/cli
$ nest new 프로젝트명 (npm선택)
</code></pre></div></div>
<hr />
<h2 id="2-nest-기본구성">2) Nest 기본구성</h2>
<p><img src="./assets/img/nest00101.jpg" alt="ex_screenshot" width="150" height="100" /></p>
<ul>
  <li>모듈
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g mo module-name
</code></pre></div>    </div>
    <p>외부로 서비스를 공개하고 싶을경우 export 추가</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService],
})
export class CatsModule {}
</code></pre></div>    </div>
  </li>
  <li>컨트롤러
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g co controller-name
</code></pre></div>    </div>
  </li>
  <li>서비스
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g service service-name
</code></pre></div>    </div>
    <hr />
    <h2 id="3-nest-응용구성">3) Nest 응용구성</h2>
    <p><img src="./assets/img/nest00102.jpg" alt="ex_screenshot" width="220" height="200" /></p>
  </li>
  <li>미들웨어
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g middleware middleware-name
</code></pre></div>    </div>
    <p>적용시 모듈을 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export class AppModule {}
=&gt;
export class AppModule implements NestModule {
configure(consumer: MiddlewareConsumer) {
  consumer.apply(MiddlewareNameMiddleware).forRoutes('*');
}
}
</code></pre></div>    </div>
  </li>
  <li>필터
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g filter filter-name
</code></pre></div>    </div>
    <p>개별 적용시 컨트롤러를 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Get()
@UseFilters(HttpExceptionFilter)
getAllCat() {
  throw new HttpException({ koko: 'fail' }, HttpStatus.FORBIDDEN);
  return 'all cat';
}
</code></pre></div>    </div>
    <p>전체 적용시 메인을 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule);
app.useGlobalFilters(new HttpExceptionFilter());
await app.listen(3000);
</code></pre></div>    </div>
  </li>
  <li>파이프
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g pipe pipe-name
</code></pre></div>    </div>
    <p>파라메터 적용시 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Get(':id')
getOneCat(@Param('id', ParseIntPipe) id: number) {
  return 'one cat';
}
</code></pre></div>    </div>
    <p>커스텀 파이프작성시 아래와 같이 생성</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Injectable()
export class PostiveIntPipe implements PipeTransform {
  transform(value: any, metadata: ArgumentMetadata) {
      if (value &lt; 0) {
        throw new HttpException();
      }
      return value;
  }
}
</code></pre></div>    </div>
    <hr />
    <h2 id="4-실행">4) 실행</h2>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm run start
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm run start:dev
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>zaimy</name></author><category term="development" /><category term="development" /><summary type="html"><![CDATA[1. 프로젝트 생성과 구성 1) 프로젝트 생성 $ npm i -g @nestjs/cli $ nest new 프로젝트명 (npm선택) 2) Nest 기본구성 모듈 $ nest g mo module-name 외부로 서비스를 공개하고 싶을경우 export 추가 @Module({ controllers: [CatsController], providers: [CatsService], exports: [CatsService], }) export class CatsModule {} 컨트롤러 $ nest g co controller-name 서비스 $ nest g service service-name 3) Nest 응용구성 미들웨어 $ nest g middleware middleware-name 적용시 모듈을 아래와같이 수정 export class AppModule {} =&gt; export class AppModule implements NestModule { configure(consumer: MiddlewareConsumer) { consumer.apply(MiddlewareNameMiddleware).forRoutes('*'); } } 필터 $ nest g filter filter-name 개별 적용시 컨트롤러를 아래와같이 수정 @Get() @UseFilters(HttpExceptionFilter) getAllCat() { throw new HttpException({ koko: 'fail' }, HttpStatus.FORBIDDEN); return 'all cat'; } 전체 적용시 메인을 아래와같이 수정 const app = await NestFactory.create(AppModule); app.useGlobalFilters(new HttpExceptionFilter()); await app.listen(3000);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">투자 - 빅솔론</title><link href="http://localhost:4000/bixolon-001" rel="alternate" type="text/html" title="투자 - 빅솔론" /><published>2022-06-08T00:00:00+09:00</published><updated>2022-06-08T00:00:00+09:00</updated><id>http://localhost:4000/bixolon-001</id><content type="html" xml:base="http://localhost:4000/bixolon-001"><![CDATA[<h1 id="빅솔론">빅솔론</h1>
<hr />
<h2 id="1-재무분석">1) 재무분석</h2>

<ul>
  <li>재무상태표</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>매출채권</td>
      <td>22,507,508,509</td>
      <td> </td>
    </tr>
    <tr>
      <td>매입채무</td>
      <td>16,312,956,576</td>
      <td> </td>
    </tr>
    <tr>
      <td>재고자산</td>
      <td>35,794,191,076</td>
      <td> </td>
    </tr>
    <tr>
      <td>무형자산</td>
      <td>1,258,066,311</td>
      <td> </td>
    </tr>
    <tr>
      <td>유형자산</td>
      <td>15,176,174,331</td>
      <td> </td>
    </tr>
    <tr>
      <td>현금</td>
      <td>65,674,617,801</td>
      <td>현금성자산+단기투자상품</td>
    </tr>
    <tr>
      <td>부채</td>
      <td>12,998,224,444</td>
      <td>총부채-매입채무</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>손익계산서</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>영업이익</td>
      <td>14,012,407,399</td>
      <td> </td>
    </tr>
    <tr>
      <td>금융수익</td>
      <td>16,472,532,072</td>
      <td>투자성공과 환차익</td>
    </tr>
    <tr>
      <td>당기순이익</td>
      <td>25,857,297,635</td>
      <td> </td>
    </tr>
    <tr>
      <td>영업순이익</td>
      <td>9,384,765,563</td>
      <td>당기순이익-금융수익</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>가치평가</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>투하자본</td>
      <td>58,422,983,651</td>
      <td> </td>
    </tr>
    <tr>
      <td>자기자본</td>
      <td>111,099,377,008</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PBR</td>
      <td>1.19</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PER</td>
      <td>14.04</td>
      <td> </td>
    </tr>
    <tr>
      <td>주가</td>
      <td>6,850</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적SRIM</td>
      <td>6,889</td>
      <td>COE 15%, 감소율 20%</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="2-비즈니스모델-분석">2) 비즈니스모델 분석</h2>
<figure style="text-align:center">
    <img src="assets/img/bixolon00101.png" style="width: 300px; height: 200px" />
    <font color="gray">프린팅 매커니즘</font> 
</figure>

<ul>
  <li>사업별</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>비중</th>
      <th>상세</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>포스프린터</td>
      <td>36%</td>
      <td>국내, 해외 모두 성장이 정체 혹은 감소</td>
    </tr>
    <tr>
      <td>모바일프린터</td>
      <td>21%</td>
      <td>배달산업에 맞춰 소폭성장중인 캐쉬플로우</td>
    </tr>
    <tr>
      <td>라벨프린터</td>
      <td>25%</td>
      <td>유통산업과 발맞춰 급격히 성장중인 캐쉬플로우</td>
    </tr>
    <tr>
      <td>프린팅매커니즘</td>
      <td>7%</td>
      <td>매해 비중이 증가하고 있으며 국내 매출증가중<br />수출비중은 감소하고 있지만 비중이 크지않음<br />향후 키오스크기술의 핵심</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>성장성</li>
</ul>

<p>비대면 코로나시대동안 포스프린터산업이 사양화되는 방향성을 보이지만 
유통산업 부흥으로 라벨프린터시장의 급격한 성장의 수혜를 받음<br />
그리고 향후 성장동력으로 키오스크산업 진출을 준비중
그러나 신사업 개척보다는 매출에서 중국비중이 낮기에 미중블록화로인한 영업망개선이 더 기대됨</p>

<ul>
  <li>영속성</li>
</ul>

<p>중기적으로 산업용소형프린트는 유통산업과 맞물려 축소되기 힘들며
장기적으로는 임금상승으로인한 키오스크산업의 비전과 맞물려 지속적인 사업을 유지할 것으로 기대</p>

<ul>
  <li>주주친화</li>
</ul>

<p>기대배당률 3.65%의 매년 배당이성장하는 배당성장주</p>]]></content><author><name>zaimy</name></author><category term="investment" /><category term="investment" /><summary type="html"><![CDATA[빅솔론 1) 재무분석]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/bixolon_logo.jpg" /><media:content medium="image" url="http://localhost:4000/bixolon_logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>