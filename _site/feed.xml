<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-17T14:22:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zaimy</title><subtitle>Development And Investment Blog</subtitle><author><name>zaimy</name></author><entry><title type="html">투자 - 크록스</title><link href="http://localhost:4000/crox-001" rel="alternate" type="text/html" title="투자 - 크록스" /><published>2022-06-17T00:00:00+09:00</published><updated>2022-06-17T00:00:00+09:00</updated><id>http://localhost:4000/crox-001</id><content type="html" xml:base="http://localhost:4000/crox-001"><![CDATA[<h1 id="크록스">크록스</h1>
<hr />
<h2 id="1-재무분석">1) 재무분석</h2>

<ul>
  <li>재무상태표</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>TTM</th>
      <th>21년</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>현금</td>
      <td>171,969</td>
      <td>213,197</td>
    </tr>
    <tr>
      <td>부채</td>
      <td>3,106,908</td>
      <td>963,559</td>
    </tr>
    <tr>
      <td>매출채권</td>
      <td>375,750</td>
      <td>182,629</td>
    </tr>
    <tr>
      <td>매입채무</td>
      <td>202,919</td>
      <td>162,145</td>
    </tr>
    <tr>
      <td>유형자산</td>
      <td>335,454</td>
      <td>269,166</td>
    </tr>
    <tr>
      <td>무형자산</td>
      <td>2,538,447</td>
      <td>30,402</td>
    </tr>
    <tr>
      <td>재고</td>
      <td>407,589</td>
      <td>213,520</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>손익계산서</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>TTM</th>
      <th>21년</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>매출</td>
      <td>2,513,466</td>
      <td>2,313,416</td>
    </tr>
    <tr>
      <td>영업이익</td>
      <td>677,055</td>
      <td>683,064</td>
    </tr>
    <tr>
      <td>순이익</td>
      <td>700,056</td>
      <td>725,694</td>
    </tr>
    <tr>
      <td>CAPEX</td>
      <td>87,719</td>
      <td>55,916</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>가치평가</li>
</ul>

<p>비즈니스 모델에서 언급할 헤이듀드 인수때문에 발생한 유형자산때문에 RIM을 쓰기 애매함, 그렇기에 DCF를 통하여 가치를 구해냄</p>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>TTM</th>
      <th>22년</th>
      <th>23년</th>
      <th>24년</th>
      <th>25년</th>
      <th>26년</th>
      <th>27년</th>
      <th>T</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>성장률</td>
      <td>18%</td>
      <td>16%</td>
      <td>14%</td>
      <td>12%</td>
      <td>10%</td>
      <td>8%</td>
      <td>6%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>매출액</td>
      <td>2,513,466</td>
      <td>2,965,890</td>
      <td>3,440,432</td>
      <td>3,922,093</td>
      <td>4,392,744</td>
      <td>4,832,018</td>
      <td>5,218,580</td>
      <td>5,531,695</td>
    </tr>
    <tr>
      <td>마진</td>
      <td>25%</td>
      <td>23%</td>
      <td>21%</td>
      <td>19%</td>
      <td>17%</td>
      <td>15%</td>
      <td>13%</td>
      <td>12%</td>
    </tr>
    <tr>
      <td>기타비용</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
      <td>30%</td>
    </tr>
    <tr>
      <td>FCFF</td>
      <td>439,857</td>
      <td>477,508</td>
      <td>505,744</td>
      <td>521,638</td>
      <td>522,737</td>
      <td>507,362</td>
      <td>474,891</td>
      <td>464,662</td>
    </tr>
    <tr>
      <td>PV</td>
      <td>434,098</td>
      <td>417,970</td>
      <td>391,915</td>
      <td>357,036</td>
      <td>315,032</td>
      <td>268,063</td>
      <td>3,406,361</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>COE : 10%</li>
  <li>적정주가 : 34.501~43.126</li>
</ul>

<hr />
<h2 id="2-비즈니스모델-분석">2) 비즈니스모델 분석</h2>
<figure style="text-align:center">
    <img src="assets/img/crox00101.jpg" />
    <font color="gray">헤이듀드</font> 
</figure>

<ul>
  <li>사업별</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>비중</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>크록스</td>
      <td>73%</td>
    </tr>
    <tr>
      <td>헤이듀드</td>
      <td>27%</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>비중</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>북미</td>
      <td>58%</td>
    </tr>
    <tr>
      <td>유럽</td>
      <td>24%</td>
    </tr>
    <tr>
      <td>아시아</td>
      <td>18%</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>성장성</li>
</ul>

<p>이미 10%이상씩 성장하고 있던 회사이다.
2022년 분기매출기준으로 대략 미국전체 보급률이 20%+@라고 유추해볼수 있다.
사실상 하나의 신발이 아무리 파이를 크게 먹어도 30%이상 보급률에서 고속성장은 힘들다고 보며
그것을 인식한듯이 헤이듀드라는 새로운 엔진을 부착하며 더욱더 성장하기위한 날개짓을 했다.<br />
결과적으로 무리한 인수가 되었지만 그렇다고 지금의 저평가를 받아야되는지는 의문이다.<br />
헤이듀드는 크록스와 동일하게 높은 마진의 편안함을 목표로 추구한다.<br />
그리고 기존의 크록스가 편한자리에서 더 편안함을 이라는 가치를 추구했다면
헤이듀드는 격식있는 자리에서 더 편안함을 이라는 가치를 추구한다.
시기의 문제가 있긴하지만 비즈니스적으로 카니발라이즈가 일어나지 않는 적절한 인수라고 생각한다.</p>

<ul>
  <li>영속성</li>
</ul>

<p>헤이듀드인수로 매우 위험한 수준의 부채를 떠안게 되었다.
그러나 예상이익이 어느정도 수준이하로 떨어지지않는이상 충분히 감내할 수 있는 범위이며
향후 1~2년이 회사의 영속성을 좌지우지 할수있는 중요한 시점이 될것이다.<br />
부채해결된다는 가정하에 미국 Z세대들의 추억을 먹고 자라는 중이라 장기적인 영속성을 유지할 수 있을것으로 기대한다.
당장은 신발 비즈니스만 하지만 자동화, 전산화를 매우 적극적으로 활용하기에 향후 어떤 확장성을 보여줄지는 예측불허다.</p>

<ul>
  <li>주주친화</li>
</ul>

<p>당분간은 부채를 상환해야되기때문에 불가능하지만
인수전에는 주주들이 걱정할정도로 자사주매입을 적극적으로 하던 극단적인 주주친화적인 회사
겨울이 끝나고나면 다시한번 주주친화적인 행보를 기대해봄직하다.</p>]]></content><author><name>zaimy</name></author><category term="investment" /><category term="investment" /><summary type="html"><![CDATA[크록스 1) 재무분석]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/crox_logo.jpg" /><media:content medium="image" url="http://localhost:4000/crox_logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">투자 - 금호석유</title><link href="http://localhost:4000/kumho-001" rel="alternate" type="text/html" title="투자 - 금호석유" /><published>2022-06-15T00:00:00+09:00</published><updated>2022-06-15T00:00:00+09:00</updated><id>http://localhost:4000/kumho-001</id><content type="html" xml:base="http://localhost:4000/kumho-001"><![CDATA[<h1 id="금호석유">금호석유</h1>
<hr />
<h2 id="1-재무분석">1) 재무분석</h2>

<ul>
  <li>재무상태표</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>매출채권</td>
      <td>961,853,624,280</td>
      <td> </td>
    </tr>
    <tr>
      <td>재고자산</td>
      <td>785,230,159,543</td>
      <td> </td>
    </tr>
    <tr>
      <td>비유동자산</td>
      <td>3,441,723,115,220</td>
      <td> </td>
    </tr>
    <tr>
      <td>현금</td>
      <td>840,731,497,555</td>
      <td> </td>
    </tr>
    <tr>
      <td>부채</td>
      <td>3,181,409,553,920</td>
      <td>여유있게 전체부채</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>손익계산서</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>영업이익</td>
      <td>2,406,835,526,956</td>
      <td> </td>
    </tr>
    <tr>
      <td>지분법손익</td>
      <td>188,610,158,853</td>
      <td> </td>
    </tr>
    <tr>
      <td>당기순이익</td>
      <td>1,965,576,708,770</td>
      <td> </td>
    </tr>
    <tr>
      <td>매출채권증가분</td>
      <td>250,378,693,753</td>
      <td> </td>
    </tr>
    <tr>
      <td>재고증가분</td>
      <td>248,466,254,714</td>
      <td> </td>
    </tr>
    <tr>
      <td>유형자산취득</td>
      <td>353,775,840,485</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적이익</td>
      <td>1,112,955,919,818</td>
      <td>감가상각 제외한 FCF</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>가치평가</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>자기자본</td>
      <td>111,099,377,008</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PBR</td>
      <td>1.579610012</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PER</td>
      <td>4.042327961</td>
      <td> </td>
    </tr>
    <tr>
      <td>RIM</td>
      <td>11,129,559,198,180</td>
      <td> </td>
    </tr>
    <tr>
      <td>SRIM</td>
      <td>5,056,510,270,812</td>
      <td> </td>
    </tr>
    <tr>
      <td>ROE10%기준 SRIM</td>
      <td>3,607,629,867,392</td>
      <td> </td>
    </tr>
    <tr>
      <td>시총</td>
      <td>4,498,932,834,000</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="2-비즈니스모델-분석">2) 비즈니스모델 분석</h2>
<figure style="text-align:center">
    <img src="assets/img/kumho00101.png" style="width: 300px; height: 200px" />
    <font color="gray">NB라텍스</font> 
</figure>

<ul>
  <li>사업별</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>비중</th>
      <th>상세</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>합성고무</td>
      <td>37%</td>
      <td>논란의 NB라텍스가 포함</td>
    </tr>
    <tr>
      <td>합성수지</td>
      <td>22%</td>
      <td>각종 편의,부품용 플라스틱</td>
    </tr>
    <tr>
      <td>금호피앤비화학</td>
      <td>32%</td>
      <td>각종 화학제품</td>
    </tr>
    <tr>
      <td>금호폴리켐</td>
      <td>7%</td>
      <td>자동차부품에 들어가는 재료</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>성장성</li>
</ul>

<p>코로나로 인한 NB라텍스 수요 폭증으로 어마어마한 실적을 달성
그러나 코로나수혜기업과 동일하게 선반영된만큼의 주가가 빠졌다
NB라텍스에대한 논란은 지속되고 있다.
코로나 수혜로 그칠것인가, 전세계 보건위생수준이 올라가면서 수요가 어느정도 유지될것인가
당장은 수출입 무역통계기준으로 중량은 50%, 가격은 30% 정도로 빠진것이 확인된다
그렇기에 밸류측정을 할때 어느정도 감안을해서 ROE를 생각해볼 필요가 있다.
그럼에도 불구하고 이 기업은 모회사와 자회사들이 모두 흑자를 내고있고 그런 기조를 꾸준히 이어왔다.
파괴적인 혁신으로 현시점의 ROE를 유지하거나 더 증가시키지는 못하겠지만 최소한 코로나 이전수준의 영업능력을 보여주지 못할 이유는 없어보인다.</p>

<ul>
  <li>영속성</li>
</ul>

<p>다양한 사업을 하고있으나
핵심은 향후 비전이 밝은 화학, 고무관련된 소재부품이 메인이다.
그것도 단하나의 특별한 제품이 있는것이 아니라 제품 포트폴리오가 탄탄하다.
아쉬운건 지금 핵심으로 간주되는 NB라텍스가 향후 어떻게 될지 미지수라는점</p>

<ul>
  <li>주주친화</li>
</ul>

<p>경영권 분쟁이슈가 있지만
그때 논쟁이 사측은 배당을 6% 하고 싶어하고 자사주 매입도 1%나 한다는거였는데
대주주쪽에서 부족하다는 논쟁이였다.
다행인지는 모르지만 국민연금이 적지않은 비중으로 끼어있다보니 분쟁권이슈가 그나마 상식적으로 잘 종료되었다고 생각한다.
우선주도 있는데 배당관점이 아니라 시세차익으로 먹을 룸이 좀더 커보이기에 본주를 선택하는편이 나을거같다.</p>]]></content><author><name>zaimy</name></author><category term="investment" /><category term="investment" /><summary type="html"><![CDATA[금호석유 1) 재무분석]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/kumho_logo.jpg" /><media:content medium="image" url="http://localhost:4000/kumho_logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 5. 스케쥴링</title><link href="http://localhost:4000/nest-005" rel="alternate" type="text/html" title="Nestjs - 5. 스케쥴링" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-005</id><content type="html" xml:base="http://localhost:4000/nest-005"><![CDATA[<h1 id="1-스케쥴링">1. 스케쥴링</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/schedule
yarn add @types/cron
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nest g mo job
nest g s job
</code></pre></div></div>
<p>모듈은 아래와같이 작성한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Module({
	imports: [ScheduleModule.forRoot()],
	providers: [JobService],
})
export class JobModule {}

</code></pre></div></div>
<p>서비스는 아래와같이 작성한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Injectable()
export class JobService {
	@Cron('10 * * * * *')
	handleCron() {
		console.log('Called when the current second is 45');
	}

	@Interval(10000)
	handleInterval() {
		console.log('Called every 10 seconds');
	}
}

</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[1. 스케쥴링 1) 설치 yarn add @nestjs/schedule yarn add @types/cron 2) 활용 nest g mo job nest g s job 모듈은 아래와같이 작성한다. ``` @Module({ imports: [ScheduleModule.forRoot()], providers: [JobService], }) export class JobModule {}]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 8. 첨부파일</title><link href="http://localhost:4000/nest-008" rel="alternate" type="text/html" title="Nestjs - 8. 첨부파일" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-008</id><content type="html" xml:base="http://localhost:4000/nest-008"><![CDATA[<h1 id="8-첨부파일">8. 첨부파일</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @types/multer
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<p>multer옵션파일 생성</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { existsSync, mkdirSync } from 'fs';
import * as multer from 'multer';
import { extname } from 'path';

export const multerOptions = {
	// fileFilter: (request, file, callback) =&gt; {
	//   if (file.mimetype.match(/\/(jpg|jpeg|png)$/)) {
	//     // 이미지 형식은 jpg, jpeg, png만 허용합니다.
	//     callback(null, true);
	//   }
	// },
	storage: multer.diskStorage({
		destination: (request, file, callback) =&gt; {
			const uploadPath = 'uploads';
			if (!existsSync(uploadPath)) {
				// uploads 폴더가 존재하지 않을시, 생성합니다.
				mkdirSync(uploadPath);
			}
			callback(null, uploadPath);
		},
		filename: (request, file, callback) =&gt; {
			//파일 이름 설정
			callback(null, `${Date.now()}${extname(file.originalname)}`);
		},
	}),
};
</code></pre></div></div>
<p>인터셉터에 옵션적용</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Post('upload')
@UseInterceptors(FileInterceptor('file', multerOptions))
uploadFile(@UploadedFile() file: Express.Multer.File) {
	console.log(file);
}
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[8. 첨부파일 1) 설치 yarn add @types/multer 2) 활용 multer옵션파일 생성 ``` import { existsSync, mkdirSync } from ‘fs’; import * as multer from ‘multer’; import { extname } from ‘path’;]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 7. Swagger</title><link href="http://localhost:4000/nest-007" rel="alternate" type="text/html" title="Nestjs - 7. Swagger" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-007</id><content type="html" xml:base="http://localhost:4000/nest-007"><![CDATA[<h1 id="7-swagger">7. Swagger</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/swagger
yarn add swagger-ui-express
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<p>main.ts 는 아래와같이 활용</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule);

const config = new DocumentBuilder()
	.setTitle('Cats example')
	.setDescription('The cats API description')
	.setVersion('1.0')
	.addTag('cats')
	.build();
const document = SwaggerModule.createDocument(app, config);
SwaggerModule.setup('api', app, document);

await app.listen(3000);
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[7. Swagger 1) 설치 yarn add @nestjs/swagger yarn add swagger-ui-express 2) 활용 main.ts 는 아래와같이 활용 ``` const app = await NestFactory.create(AppModule);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 6. AXIOS 통신</title><link href="http://localhost:4000/nest-006" rel="alternate" type="text/html" title="Nestjs - 6. AXIOS 통신" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-006</id><content type="html" xml:base="http://localhost:4000/nest-006"><![CDATA[<h1 id="6-axios-통신">6. AXIOS 통신</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add axios
yarn add @nestjs/axios
</code></pre></div></div>
<hr />
<h2 id="2-nest-기본구성">2) Nest 기본구성</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { HttpService } from '@nestjs/axios';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const a = await lastValueFrom(this.httpService.get(url));
console.log(a.data);
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[6. AXIOS 통신 1) 설치 yarn add axios yarn add @nestjs/axios 2) Nest 기본구성 import { HttpService } from '@nestjs/axios'; const a = await lastValueFrom(this.httpService.get(url)); console.log(a.data);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Yarn 개발 환경구축</title><link href="http://localhost:4000/yarn-001" rel="alternate" type="text/html" title="Yarn 개발 환경구축" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/yarn-001</id><content type="html" xml:base="http://localhost:4000/yarn-001"><![CDATA[<h1 id="1-yarn-설치">1. Yarn 설치</h1>
<p>nodejs 설치시 자동으로 설치됨 (https://nodejs.org/ko/)</p>

<h1 id="2-yarn-모듈추가">2. Yarn 모듈추가</h1>
<p>아래와 같은 형식으로 모듈을 추가한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/cli
</code></pre></div></div>
<p>아래와 같은 형식으로 프로젝트를 실행한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="yarn" /><summary type="html"><![CDATA[1. Yarn 설치 nodejs 설치시 자동으로 설치됨 (https://nodejs.org/ko/)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/yarn_logo.jpeg" /><media:content medium="image" url="http://localhost:4000/yarn_logo.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 4. 로그</title><link href="http://localhost:4000/nest-004" rel="alternate" type="text/html" title="Nestjs - 4. 로그" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/nest-004</id><content type="html" xml:base="http://localhost:4000/nest-004"><![CDATA[<h1 id="4-로그">4. 로그</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add nest-winston
yarn add winston
yarn add winston-daily-rotate-file
</code></pre></div></div>
<hr />
<h2 id="2-설정">2) 설정</h2>
<p>로그레벨은 아래와 같다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ 
  error: 0, 
  warn: 1, 
  info: 2, 
  http: 3,
  verbose: 4, 
  debug: 5, 
  silly: 6 
}
</code></pre></div></div>
<p>아래처럼 main.ts에 로그저장형태와 로그레벨 등을 설정한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { utilities, WinstonModule } from 'nest-winston';
import { format, transports } from 'winston';
import 'winston-daily-rotate-file';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule, {
	logger: WinstonModule.createLogger({
	  transports: [
		new transports.DailyRotateFile({
		  level: process.env.NODE_ENV === 'dev' ? 'info' : 'silly',
		  format: format.combine(
			format.timestamp({
			  format: 'YYYY-MM-DD HH:mm:ss',
			}),
			format.printf(
			  (info) =&gt;
				`[${info.timestamp}] ${process.env.APP_ENV}.${info.level}: ${info.message}`,
			),
		  ),
		  filename: 'logs/%DATE%.log',
		  datePattern: 'YYYY-MM-DD',
		  zippedArchive: true,
		  maxSize: '20m',
		  maxFiles: '14d',
		}),

		new transports.Console({
		  level: process.env.NODE_ENV === 'dev' ? 'info' : 'silly',
		  format: format.combine(
			format.timestamp(),
			utilities.format.nestLike('MyApp', {
			  prettyPrint: true,
			}),
		  ),
		}),
	  ],
	}),
});
</code></pre></div></div>

<hr />
<h2 id="3-사용">3) 사용</h2>
<p>모듈에 아래와같이 프로바이더제공<br />
main에 기본 로거를 대체했기에 기본로거를 쓰듯이 쓰면됨</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { Logger, Module } from '@nestjs/common';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>providers: [Logger]
</code></pre></div></div>
<p>아래와같이 DI 주입받음</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constructor(
	@Inject(Logger) private readonly logger: LoggerService,
) {}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this.logger.log('ttt');
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[4. 로그 1) 설치 yarn add nest-winston yarn add winston yarn add winston-daily-rotate-file 2) 설정 로그레벨은 아래와 같다 { error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6 } 아래처럼 main.ts에 로그저장형태와 로그레벨 등을 설정한다 import { utilities, WinstonModule } from 'nest-winston'; import { format, transports } from 'winston'; import 'winston-daily-rotate-file'; ``` const app = await NestFactory.create(AppModule, { logger: WinstonModule.createLogger({ transports: [ new transports.DailyRotateFile({ level: process.env.NODE_ENV === ‘dev’ ? ‘info’ : ‘silly’, format: format.combine( format.timestamp({ format: ‘YYYY-MM-DD HH:mm:ss’, }), format.printf( (info) =&gt; [${info.timestamp}] ${process.env.APP_ENV}.${info.level}: ${info.message}, ), ), filename: ‘logs/%DATE%.log’, datePattern: ‘YYYY-MM-DD’, zippedArchive: true, maxSize: ‘20m’, maxFiles: ‘14d’, }),]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 3. 외부환경파일</title><link href="http://localhost:4000/nest-003" rel="alternate" type="text/html" title="Nestjs - 3. 외부환경파일" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/nest-003</id><content type="html" xml:base="http://localhost:4000/nest-003"><![CDATA[<h1 id="3-외부환경파일">3. 외부환경파일</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<ul>
  <li>@nestjs/config : 설정 파일을 외부에서 가져오기 위한 nestjs에서 제공되는 모듈</li>
  <li>cross-env : os에 종속되지 않고, 플랫폼 표준화를 하기위해 필요한 라이브러리</li>
  <li>joi : 형식에 대한 유효성 검사</li>
</ul>

<p>아래와같이 설치한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/config 
yarn add cross-env 
yarn add joi
</code></pre></div></div>
<hr />
<h2 id="2-cross-env로-환경변수-주입">2) cross-env로 환경변수 주입</h2>
<p>package.json에 cross-env NODE_ENV=실행환경 추가</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"start:dev": "cross-env NODE_ENV=dev nest start --watch",
"start:prod": "cross-env NODE_ENV=prod node dist/main",
</code></pre></div></div>
<hr />
<h2 id="3-nestjsconfig로-환경변수-호출">3) @nestjs/config로 환경변수 호출</h2>
<p>app.module.ts 에 config모듈을 import<br />
validationSchema 를 통해 문법을 검사</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { ConfigModule } from '@nestjs/config';
import * as Joi from 'joi';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imports: [
	ConfigModule.forRoot({
		isGlobal: true,
		envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test',
		ignoreEnvFile: process.env.NODE_ENV === 'prod',
		validationSchema: Joi.object({
			NODE_ENV: Joi.string().valid('dev', 'prod').required(),
			DB_HOST: Joi.string().required(),
			DB_PORT: Joi.string().required(),
			DB_USERNAME: Joi.string().required(),
			DB_PASSWORD: Joi.string().required(),
			DB_SID: Joi.string().required(),
		}),
    }),
]
</code></pre></div></div>
<p>최상위 디렉토리에 .env.dev 파일생성</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DB_HOST=IP
DB_PORT=포트
DB_USERNAME=계정
DB_PASSWORD=비밀번호
DB_SID=sid
</code></pre></div></div>
<hr />
<h2 id="4-생성한-환경설정-적용">4) 생성한 환경설정 적용</h2>
<p>예제로 데이터베이스 설정 항목들을 외부환경설정에거 가져옴</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeOrmModule.forRoot({
	type: 'oracle',

	host: process.env.DB_HOST,
	port: +process.env.DB_PORT,
	username: process.env.DB_USERNAME,
	password: process.env.DB_PASSWORD,
	sid: process.env.DB_SID,
	
	entities: [cm_dsplist_act, CtCtlproc, AiFlashcd],
	synchronize: false,
	// logging: true,
}),
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[3. 외부환경파일 1) 설치 @nestjs/config : 설정 파일을 외부에서 가져오기 위한 nestjs에서 제공되는 모듈 cross-env : os에 종속되지 않고, 플랫폼 표준화를 하기위해 필요한 라이브러리 joi : 형식에 대한 유효성 검사]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 2. 데이터베이스</title><link href="http://localhost:4000/nest-002" rel="alternate" type="text/html" title="Nestjs - 2. 데이터베이스" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/nest-002</id><content type="html" xml:base="http://localhost:4000/nest-002"><![CDATA[<h1 id="2-데이터베이스-오라클-기준">2. 데이터베이스 (오라클 기준)</h1>
<hr />
<h2 id="1-typeorm-설치">1) TypeORM 설치</h2>
<p>오라클 연결시 Oracle Client 설치가 필요하다 
(https://www.oracle.com/kr/database/technologies/instant-client/downloads.html)
그후 아래와 같이 typeORM을 다운로드한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add oracledb
yarn add @nestjs/typeorm typeorm oracle
</code></pre></div></div>
<p>설치시 문제가 발생한다면 yarn 및 npm 버전업그레이드를 고려해본다</p>

<p>포스트그래스시</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add pg
yarn add @nestjs/typeorm typeorm postgres
</code></pre></div></div>

<hr />
<h2 id="2-데이터베이스-접속정보-설정">2) 데이터베이스 접속정보 설정</h2>
<p>app.module.ts에 접속할 데이터베이스정보를 입력한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imports: [
	TypeOrmModule.forRoot({
		type: 'oracle',
		host: '아이피',
		port: 포트,
		username: '로그인ID',
		password: '로그인PW',
		//database: 'ServiceName',
		sid: 'SID',
		entities: [엔티티목록],
		synchronize: false,
		//logging: true,
	}),
	TypeOrmModule.forFeature([엔티티목록]),
],
</code></pre></div></div>
<p>접속정보 옵션설정시 synchronize를 true 잡으면 기존에 구축된 데이터베이스에 변형이 가해진다
그러므로 항상 false를 기본으로 삼고 프로토타입모델에만 true로 설정한다</p>

<hr />
<h2 id="3-엔티티-구축">3) 엔티티 구축</h2>
<p>추천경로 : /src/entity/파일명(실제 테이블 소문자로 작성하길 추천).entity.ts</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { Column, Entity, PrimaryColumn } from 'typeorm';

@Entity({ name: '테이블명', schema: '스카미마명' })
export class 파스칼케이스파일명 {
	@PrimaryColumn({ name: 'PK칼럼' }) pkcol: string;
	@Column({ name: '일반적인칼럼' }) normalcol: string;
}
</code></pre></div></div>
<p>작성된 Entity는 2)처럼 app.module.ts 에 등록되어있어야 사용할 수 있다</p>

<hr />
<h2 id="4-엔티티-활용">4) 엔티티 활용</h2>
<p>필요한 Repository와 DataSource DI주입</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constructor(
	@InjectRepository(엔티티명)
	private 엔티티명Repository: Repository&lt;엔티티명&gt;,
	private readonly dataSource: DataSource,
) {}
</code></pre></div></div>
<p>Querybuilder Crud</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async get엔티티명(p: string): Promise&lt;AiFlashcd[]&gt; {
	return await this.dataSource
		.createQueryBuilder()
		.select('a')
		.from(엔티티명, 'a')
		.where('a.컬럼명 = :id', { id: p })
		.getMany();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async insert엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.insert()
		.into(엔티티명)
		.values({
			컬럼명: p,
			컬럼명: () =&gt; 'SYSDATE',
		})
		.execute();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async update엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.update(엔티티명)
		.set({ 컬럼명: p + 1 })
		.where({ 컬럼명: p })
		.execute();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async delete엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.delete()
		.from(엔티티명)
		.where({ 컬럼명: p })
		.execute();
}
</code></pre></div></div>
<p>Repository Crud</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async get엔티티명(p: string): Promise&lt;엔티티명[]&gt; {
	return this.엔티티명Repository.find();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async insert엔티티명(p: string): Promise&lt;void&gt; {
	await this.엔티티명Repository.save({
		컬럼명: p,
		컬럼명: new Date(),
	});
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async update엔티티명(p: string): Promise&lt;void&gt; {
	this.엔티티명Repository.update(
		{ 컬럼명: p },
		{
			컬럼명: p + 1,
		},
	);
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async delete엔티티명(p: string): Promise&lt;void&gt; {
	await this.엔티티명Repository.delete({ 컬럼명: In([p]) });
}
</code></pre></div></div>

<hr />
<h2 id="5-트랜잭션">5) 트랜잭션</h2>
<p>아래와 같이 구성할대 에러처리시 Rollback이 발생한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async deleteAndInsert엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource.manager.transaction(async (a) =&gt; {
		await a.getRepository(엔티티명).delete({ 
			컬럼명: In([p]) 
		});
		throw new Error('ddd');
		await a.getRepository(엔티티명).save({
			컬럼명: p + 1,
		});
	});
}
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[2. 데이터베이스 (오라클 기준) 1) TypeORM 설치 오라클 연결시 Oracle Client 설치가 필요하다 (https://www.oracle.com/kr/database/technologies/instant-client/downloads.html) 그후 아래와 같이 typeORM을 다운로드한다 yarn add oracledb yarn add @nestjs/typeorm typeorm oracle 설치시 문제가 발생한다면 yarn 및 npm 버전업그레이드를 고려해본다]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>