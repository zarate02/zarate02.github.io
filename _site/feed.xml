<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-13T16:22:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zaimy</title><subtitle>Development And Investment Blog</subtitle><author><name>zaimy</name></author><entry><title type="html">Nestjs - 5. 스케쥴링</title><link href="http://localhost:4000/nest-005" rel="alternate" type="text/html" title="Nestjs - 5. 스케쥴링" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-005</id><content type="html" xml:base="http://localhost:4000/nest-005"><![CDATA[<h1 id="1-스케쥴링">1. 스케쥴링</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/schedule
yarn add @types/cron
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nest g mo job
nest g s job
</code></pre></div></div>
<p>모듈은 아래와같이 작성한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Module({
	imports: [ScheduleModule.forRoot()],
	providers: [JobService],
})
export class JobModule {}

</code></pre></div></div>
<p>서비스는 아래와같이 작성한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Injectable()
export class JobService {
	@Cron('10 * * * * *')
	handleCron() {
		console.log('Called when the current second is 45');
	}

	@Interval(10000)
	handleInterval() {
		console.log('Called every 10 seconds');
	}
}

</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[1. 스케쥴링 1) 설치 yarn add @nestjs/schedule yarn add @types/cron 2) 활용 nest g mo job nest g s job 모듈은 아래와같이 작성한다. ``` @Module({ imports: [ScheduleModule.forRoot()], providers: [JobService], }) export class JobModule {}]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 8. 첨부파일</title><link href="http://localhost:4000/nest-008" rel="alternate" type="text/html" title="Nestjs - 8. 첨부파일" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-008</id><content type="html" xml:base="http://localhost:4000/nest-008"><![CDATA[<h1 id="8-첨부파일">8. 첨부파일</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @types/multer
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<p>multer옵션파일 생성</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { existsSync, mkdirSync } from 'fs';
import * as multer from 'multer';
import { extname } from 'path';

export const multerOptions = {
	// fileFilter: (request, file, callback) =&gt; {
	//   if (file.mimetype.match(/\/(jpg|jpeg|png)$/)) {
	//     // 이미지 형식은 jpg, jpeg, png만 허용합니다.
	//     callback(null, true);
	//   }
	// },
	storage: multer.diskStorage({
		destination: (request, file, callback) =&gt; {
			const uploadPath = 'uploads';
			if (!existsSync(uploadPath)) {
				// uploads 폴더가 존재하지 않을시, 생성합니다.
				mkdirSync(uploadPath);
			}
			callback(null, uploadPath);
		},
		filename: (request, file, callback) =&gt; {
			//파일 이름 설정
			callback(null, `${Date.now()}${extname(file.originalname)}`);
		},
	}),
};
</code></pre></div></div>
<p>인터셉터에 옵션적용</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Post('upload')
@UseInterceptors(FileInterceptor('file', multerOptions))
uploadFile(@UploadedFile() file: Express.Multer.File) {
	console.log(file);
}
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[8. 첨부파일 1) 설치 yarn add @types/multer 2) 활용 multer옵션파일 생성 ``` import { existsSync, mkdirSync } from ‘fs’; import * as multer from ‘multer’; import { extname } from ‘path’;]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 7. Swagger</title><link href="http://localhost:4000/nest-007" rel="alternate" type="text/html" title="Nestjs - 7. Swagger" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-007</id><content type="html" xml:base="http://localhost:4000/nest-007"><![CDATA[<h1 id="7-swagger">7. Swagger</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/swagger
yarn add swagger-ui-express
</code></pre></div></div>
<hr />
<h2 id="2-활용">2) 활용</h2>
<p>main.ts 는 아래와같이 활용</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule);

const config = new DocumentBuilder()
	.setTitle('Cats example')
	.setDescription('The cats API description')
	.setVersion('1.0')
	.addTag('cats')
	.build();
const document = SwaggerModule.createDocument(app, config);
SwaggerModule.setup('api', app, document);

await app.listen(3000);
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[7. Swagger 1) 설치 yarn add @nestjs/swagger yarn add swagger-ui-express 2) 활용 main.ts 는 아래와같이 활용 ``` const app = await NestFactory.create(AppModule);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 6. AXIOS 통신</title><link href="http://localhost:4000/nest-006" rel="alternate" type="text/html" title="Nestjs - 6. AXIOS 통신" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/nest-006</id><content type="html" xml:base="http://localhost:4000/nest-006"><![CDATA[<h1 id="6-axios-통신">6. AXIOS 통신</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add axios
yarn add @nestjs/axios
</code></pre></div></div>
<hr />
<h2 id="2-nest-기본구성">2) Nest 기본구성</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { HttpService } from '@nestjs/axios';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const a = await lastValueFrom(this.httpService.get(url));
console.log(a.data);
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[6. AXIOS 통신 1) 설치 yarn add axios yarn add @nestjs/axios 2) Nest 기본구성 import { HttpService } from '@nestjs/axios'; const a = await lastValueFrom(this.httpService.get(url)); console.log(a.data);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 4. 로그</title><link href="http://localhost:4000/nest-004" rel="alternate" type="text/html" title="Nestjs - 4. 로그" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/nest-004</id><content type="html" xml:base="http://localhost:4000/nest-004"><![CDATA[<h1 id="4-로그">4. 로그</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add nest-winston
yarn add winston
yarn add winston-daily-rotate-file
</code></pre></div></div>
<hr />
<h2 id="2-설정">2) 설정</h2>
<p>로그레벨은 아래와 같다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ 
  error: 0, 
  warn: 1, 
  info: 2, 
  http: 3,
  verbose: 4, 
  debug: 5, 
  silly: 6 
}
</code></pre></div></div>
<p>아래처럼 main.ts에 로그저장형태와 로그레벨 등을 설정한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { utilities, WinstonModule } from 'nest-winston';
import { format, transports } from 'winston';
import 'winston-daily-rotate-file';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule, {
	logger: WinstonModule.createLogger({
	  transports: [
		new transports.DailyRotateFile({
		  level: process.env.NODE_ENV === 'dev' ? 'info' : 'silly',
		  format: format.combine(
			format.timestamp({
			  format: 'YYYY-MM-DD HH:mm:ss',
			}),
			format.printf(
			  (info) =&gt;
				`[${info.timestamp}] ${process.env.APP_ENV}.${info.level}: ${info.message}`,
			),
		  ),
		  filename: 'logs/%DATE%.log',
		  datePattern: 'YYYY-MM-DD',
		  zippedArchive: true,
		  maxSize: '20m',
		  maxFiles: '14d',
		}),

		new transports.Console({
		  level: process.env.NODE_ENV === 'dev' ? 'info' : 'silly',
		  format: format.combine(
			format.timestamp(),
			utilities.format.nestLike('MyApp', {
			  prettyPrint: true,
			}),
		  ),
		}),
	  ],
	}),
});
</code></pre></div></div>

<hr />
<h2 id="3-사용">3) 사용</h2>
<p>모듈에 아래와같이 프로바이더제공<br />
main에 기본 로거를 대체했기에 기본로거를 쓰듯이 쓰면됨</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { Logger, Module } from '@nestjs/common';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>providers: [Logger]
</code></pre></div></div>
<p>아래와같이 DI 주입받음</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constructor(
	@Inject(Logger) private readonly logger: LoggerService,
) {}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this.logger.log('ttt');
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[4. 로그 1) 설치 yarn add nest-winston yarn add winston yarn add winston-daily-rotate-file 2) 설정 로그레벨은 아래와 같다 { error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6 } 아래처럼 main.ts에 로그저장형태와 로그레벨 등을 설정한다 import { utilities, WinstonModule } from 'nest-winston'; import { format, transports } from 'winston'; import 'winston-daily-rotate-file'; ``` const app = await NestFactory.create(AppModule, { logger: WinstonModule.createLogger({ transports: [ new transports.DailyRotateFile({ level: process.env.NODE_ENV === ‘dev’ ? ‘info’ : ‘silly’, format: format.combine( format.timestamp({ format: ‘YYYY-MM-DD HH:mm:ss’, }), format.printf( (info) =&gt; [${info.timestamp}] ${process.env.APP_ENV}.${info.level}: ${info.message}, ), ), filename: ‘logs/%DATE%.log’, datePattern: ‘YYYY-MM-DD’, zippedArchive: true, maxSize: ‘20m’, maxFiles: ‘14d’, }),]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Yarn 개발 환경구축</title><link href="http://localhost:4000/yarn-001" rel="alternate" type="text/html" title="Yarn 개발 환경구축" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/yarn-001</id><content type="html" xml:base="http://localhost:4000/yarn-001"><![CDATA[<h1 id="1-yarn-설치">1. Yarn 설치</h1>
<p>nodejs 설치시 자동으로 설치됨 (https://nodejs.org/ko/)</p>

<h1 id="2-yarn-모듈추가">2. Yarn 모듈추가</h1>
<p>아래와 같은 형식으로 모듈을 추가한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/cli
</code></pre></div></div>
<p>아래와 같은 형식으로 프로젝트를 실행한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="yarn" /><summary type="html"><![CDATA[1. Yarn 설치 nodejs 설치시 자동으로 설치됨 (https://nodejs.org/ko/)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/yarn_logo.jpeg" /><media:content medium="image" url="http://localhost:4000/yarn_logo.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 3. 외부환경파일</title><link href="http://localhost:4000/nest-003" rel="alternate" type="text/html" title="Nestjs - 3. 외부환경파일" /><published>2022-06-10T00:00:00+09:00</published><updated>2022-06-10T00:00:00+09:00</updated><id>http://localhost:4000/nest-003</id><content type="html" xml:base="http://localhost:4000/nest-003"><![CDATA[<h1 id="3-외부환경파일">3. 외부환경파일</h1>
<hr />
<h2 id="1-설치">1) 설치</h2>
<ul>
  <li>@nestjs/config : 설정 파일을 외부에서 가져오기 위한 nestjs에서 제공되는 모듈</li>
  <li>cross-env : os에 종속되지 않고, 플랫폼 표준화를 하기위해 필요한 라이브러리</li>
  <li>joi : 형식에 대한 유효성 검사</li>
</ul>

<p>아래와같이 설치한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/config 
yarn add cross-env 
yarn add joi
</code></pre></div></div>
<hr />
<h2 id="2-cross-env로-환경변수-주입">2) cross-env로 환경변수 주입</h2>
<p>package.json에 cross-env NODE_ENV=실행환경 추가</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"start:dev": "cross-env NODE_ENV=dev nest start --watch",
"start:prod": "cross-env NODE_ENV=prod node dist/main",
</code></pre></div></div>
<hr />
<h2 id="3-nestjsconfig로-환경변수-호출">3) @nestjs/config로 환경변수 호출</h2>
<p>app.module.ts 에 config모듈을 import<br />
validationSchema 를 통해 문법을 검사</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { ConfigModule } from '@nestjs/config';
import * as Joi from 'joi';
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imports: [
	ConfigModule.forRoot({
		isGlobal: true,
		envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test',
		ignoreEnvFile: process.env.NODE_ENV === 'prod',
		validationSchema: Joi.object({
			NODE_ENV: Joi.string().valid('dev', 'prod').required(),
			DB_HOST: Joi.string().required(),
			DB_PORT: Joi.string().required(),
			DB_USERNAME: Joi.string().required(),
			DB_PASSWORD: Joi.string().required(),
			DB_SID: Joi.string().required(),
		}),
    }),
]
</code></pre></div></div>
<p>최상위 디렉토리에 .env.dev 파일생성</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DB_HOST=IP
DB_PORT=포트
DB_USERNAME=계정
DB_PASSWORD=비밀번호
DB_SID=sid
</code></pre></div></div>
<hr />
<h2 id="4-생성한-환경설정-적용">4) 생성한 환경설정 적용</h2>
<p>예제로 데이터베이스 설정 항목들을 외부환경설정에거 가져옴</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeOrmModule.forRoot({
	type: 'oracle',

	host: process.env.DB_HOST,
	port: +process.env.DB_PORT,
	username: process.env.DB_USERNAME,
	password: process.env.DB_PASSWORD,
	sid: process.env.DB_SID,
	
	entities: [cm_dsplist_act, CtCtlproc, AiFlashcd],
	synchronize: false,
	// logging: true,
}),
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[3. 외부환경파일 1) 설치 @nestjs/config : 설정 파일을 외부에서 가져오기 위한 nestjs에서 제공되는 모듈 cross-env : os에 종속되지 않고, 플랫폼 표준화를 하기위해 필요한 라이브러리 joi : 형식에 대한 유효성 검사]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 2. 데이터베이스</title><link href="http://localhost:4000/nest-002" rel="alternate" type="text/html" title="Nestjs - 2. 데이터베이스" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/nest-002</id><content type="html" xml:base="http://localhost:4000/nest-002"><![CDATA[<h1 id="2-데이터베이스-오라클-기준">2. 데이터베이스 (오라클 기준)</h1>
<hr />
<h2 id="1-typeorm-설치">1) TypeORM 설치</h2>
<p>오라클 연결시 Oracle Client 설치가 필요하다 
(https://www.oracle.com/kr/database/technologies/instant-client/downloads.html)
그후 아래와 같이 typeORM을 다운로드한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @nestjs/typeorm typeorm oracle
</code></pre></div></div>
<p>설치시 문제가 발생한다면 yarn 및 npm 버전업그레이드를 고려해본다</p>

<p>포스트그래스시</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add pg
yarn add @nestjs/typeorm typeorm postgres
</code></pre></div></div>

<hr />
<h2 id="2-데이터베이스-접속정보-설정">2) 데이터베이스 접속정보 설정</h2>
<p>app.module.ts에 접속할 데이터베이스정보를 입력한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imports: [
	TypeOrmModule.forRoot({
		type: 'oracle',
		host: '아이피',
		port: 포트,
		username: '로그인ID',
		password: '로그인PW',
		//database: 'ServiceName',
		sid: 'SID',
		entities: [엔티티목록],
		synchronize: false,
		//logging: true,
	}),
	TypeOrmModule.forFeature([엔티티목록]),
],
</code></pre></div></div>
<p>접속정보 옵션설정시 synchronize를 true 잡으면 기존에 구축된 데이터베이스에 변형이 가해진다
그러므로 항상 false를 기본으로 삼고 프로토타입모델에만 true로 설정한다</p>

<hr />
<h2 id="3-엔티티-구축">3) 엔티티 구축</h2>
<p>추천경로 : /src/entity/파일명(실제 테이블 소문자로 작성하길 추천).entity.ts</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { Column, Entity, PrimaryColumn } from 'typeorm';

@Entity({ name: '테이블명', schema: '스카미마명' })
export class 파스칼케이스파일명 {
	@PrimaryColumn({ name: 'PK칼럼' }) pkcol: string;
	@Column({ name: '일반적인칼럼' }) normalcol: string;
}
</code></pre></div></div>
<p>작성된 Entity는 2)처럼 app.module.ts 에 등록되어있어야 사용할 수 있다</p>

<hr />
<h2 id="4-엔티티-활용">4) 엔티티 활용</h2>
<p>필요한 Repository와 DataSource DI주입</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constructor(
	@InjectRepository(엔티티명)
	private 엔티티명Repository: Repository&lt;엔티티명&gt;,
	private readonly dataSource: DataSource,
) {}
</code></pre></div></div>
<p>Querybuilder Crud</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async get엔티티명(p: string): Promise&lt;AiFlashcd[]&gt; {
	return await this.dataSource
		.createQueryBuilder()
		.select('a')
		.from(엔티티명, 'a')
		.where('a.컬럼명 = :id', { id: p })
		.getMany();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async insert엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.insert()
		.into(엔티티명)
		.values({
			컬럼명: p,
			컬럼명: () =&gt; 'SYSDATE',
		})
		.execute();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async update엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.update(엔티티명)
		.set({ 컬럼명: p + 1 })
		.where({ 컬럼명: p })
		.execute();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async delete엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource
		.createQueryBuilder()
		.delete()
		.from(엔티티명)
		.where({ 컬럼명: p })
		.execute();
}
</code></pre></div></div>
<p>Repository Crud</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async get엔티티명(p: string): Promise&lt;엔티티명[]&gt; {
	return this.엔티티명Repository.find();
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async insert엔티티명(p: string): Promise&lt;void&gt; {
	await this.엔티티명Repository.save({
		컬럼명: p,
		컬럼명: new Date(),
	});
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async update엔티티명(p: string): Promise&lt;void&gt; {
	this.엔티티명Repository.update(
		{ 컬럼명: p },
		{
			컬럼명: p + 1,
		},
	);
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async delete엔티티명(p: string): Promise&lt;void&gt; {
	await this.엔티티명Repository.delete({ 컬럼명: In([p]) });
}
</code></pre></div></div>

<hr />
<h2 id="5-트랜잭션">5) 트랜잭션</h2>
<p>아래와 같이 구성할대 에러처리시 Rollback이 발생한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async deleteAndInsert엔티티명(p: string): Promise&lt;void&gt; {
	await this.dataSource.manager.transaction(async (a) =&gt; {
		await a.getRepository(엔티티명).delete({ 
			컬럼명: In([p]) 
		});
		throw new Error('ddd');
		await a.getRepository(엔티티명).save({
			컬럼명: p + 1,
		});
	});
}
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[2. 데이터베이스 (오라클 기준) 1) TypeORM 설치 오라클 연결시 Oracle Client 설치가 필요하다 (https://www.oracle.com/kr/database/technologies/instant-client/downloads.html) 그후 아래와 같이 typeORM을 다운로드한다 yarn add @nestjs/typeorm typeorm oracle 설치시 문제가 발생한다면 yarn 및 npm 버전업그레이드를 고려해본다]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">투자 - 빅솔론</title><link href="http://localhost:4000/bixolon-001" rel="alternate" type="text/html" title="투자 - 빅솔론" /><published>2022-06-08T00:00:00+09:00</published><updated>2022-06-08T00:00:00+09:00</updated><id>http://localhost:4000/bixolon-001</id><content type="html" xml:base="http://localhost:4000/bixolon-001"><![CDATA[<h1 id="빅솔론">빅솔론</h1>
<hr />
<h2 id="1-재무분석">1) 재무분석</h2>

<ul>
  <li>재무상태표</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>매출채권</td>
      <td>22,507,508,509</td>
      <td> </td>
    </tr>
    <tr>
      <td>매입채무</td>
      <td>16,312,956,576</td>
      <td> </td>
    </tr>
    <tr>
      <td>재고자산</td>
      <td>35,794,191,076</td>
      <td> </td>
    </tr>
    <tr>
      <td>무형자산</td>
      <td>1,258,066,311</td>
      <td> </td>
    </tr>
    <tr>
      <td>유형자산</td>
      <td>15,176,174,331</td>
      <td> </td>
    </tr>
    <tr>
      <td>현금</td>
      <td>65,674,617,801</td>
      <td>현금성자산+단기투자상품</td>
    </tr>
    <tr>
      <td>부채</td>
      <td>12,998,224,444</td>
      <td>총부채-매입채무</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>손익계산서</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>영업이익</td>
      <td>14,012,407,399</td>
      <td> </td>
    </tr>
    <tr>
      <td>금융수익</td>
      <td>16,472,532,072</td>
      <td>투자성공과 환차익</td>
    </tr>
    <tr>
      <td>당기순이익</td>
      <td>25,857,297,635</td>
      <td> </td>
    </tr>
    <tr>
      <td>영업순이익</td>
      <td>9,384,765,563</td>
      <td>당기순이익-금융수익</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>가치평가</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>투하자본</td>
      <td>58,422,983,651</td>
      <td> </td>
    </tr>
    <tr>
      <td>자기자본</td>
      <td>111,099,377,008</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PBR</td>
      <td>1.19</td>
      <td> </td>
    </tr>
    <tr>
      <td>보수적PER</td>
      <td>14.04</td>
      <td> </td>
    </tr>
    <tr>
      <td>주가</td>
      <td>6,850</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="2-비즈니스모델-분석">2) 비즈니스모델 분석</h2>
<figure style="text-align:center">
    <img src="assets/img/bixolon00101.png" style="width: 300px; height: 200px" />
    <font color="gray">프린팅 매커니즘</font> 
</figure>

<ul>
  <li>사업별</li>
</ul>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>비중</th>
      <th>상세</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>포스프린터</td>
      <td>36%</td>
      <td>국내, 해외 모두 성장이 정체 혹은 감소</td>
    </tr>
    <tr>
      <td>모바일프린터</td>
      <td>21%</td>
      <td>배달산업에 맞춰 소폭성장중인 캐쉬플로우</td>
    </tr>
    <tr>
      <td>라벨프린터</td>
      <td>25%</td>
      <td>유통산업과 발맞춰 급격히 성장중인 캐쉬플로우</td>
    </tr>
    <tr>
      <td>프린팅매커니즘</td>
      <td>7%</td>
      <td>매해 비중이 증가하고 있으며 국내 매출증가중<br />수출비중은 감소하고 있지만 비중이 크지않음<br />향후 키오스크기술의 핵심</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>성장성</li>
</ul>

<p>비대면 코로나시대동안 포스프린터산업이 사양화되는 방향성을 보이지만 
유통산업 부흥으로 라벨프린터시장의 급격한 성장의 수혜를 받음<br />
그리고 향후 성장동력으로 키오스크산업 진출을 준비중
그러나 신사업 개척보다는 매출에서 중국비중이 낮기에 미중블록화로인한 영업망개선이 더 기대됨</p>

<ul>
  <li>영속성</li>
</ul>

<p>중기적으로 산업용소형프린트는 유통산업과 맞물려 축소되기 힘들며
장기적으로는 임금상승으로인한 키오스크산업의 비전과 맞물려 지속적인 사업을 유지할 것으로 기대</p>

<ul>
  <li>주주친화</li>
</ul>

<p>기대배당률 3.65%의 매년 배당이성장하는 배당성장주</p>]]></content><author><name>zaimy</name></author><category term="investment" /><category term="investment" /><summary type="html"><![CDATA[빅솔론 1) 재무분석]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/bixolon_logo.jpg" /><media:content medium="image" url="http://localhost:4000/bixolon_logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Nestjs - 1. 프로젝트 생성과 구성</title><link href="http://localhost:4000/nest-001" rel="alternate" type="text/html" title="Nestjs - 1. 프로젝트 생성과 구성" /><published>2022-06-08T00:00:00+09:00</published><updated>2022-06-08T00:00:00+09:00</updated><id>http://localhost:4000/nest-001</id><content type="html" xml:base="http://localhost:4000/nest-001"><![CDATA[<h1 id="1-프로젝트-생성과-구성">1. 프로젝트 생성과 구성</h1>
<hr />
<h2 id="1-프로젝트-생성">1) 프로젝트 생성</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ yarn add @nestjs/cli
$ nest new 프로젝트명 (yarn선택)
</code></pre></div></div>
<hr />
<h2 id="2-nest-기본구성">2) Nest 기본구성</h2>
<p><img src="./assets/img/nest00101.JPG" alt="ex_screenshot" width="150" height="100" /></p>
<ul>
  <li>모듈
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g mo module-name
</code></pre></div>    </div>
    <p>외부로 서비스를 공개하고 싶을경우 export 추가</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService],
})
export class CatsModule {}
</code></pre></div>    </div>
  </li>
  <li>컨트롤러
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g co controller-name
</code></pre></div>    </div>
  </li>
  <li>서비스
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g service service-name
</code></pre></div>    </div>
    <hr />
    <h2 id="3-nest-응용구성">3) Nest 응용구성</h2>
    <p><img src="./assets/img/nest00102.JPG" alt="ex_screenshot" width="220" height="200" /></p>
  </li>
  <li>미들웨어
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g middleware middleware-name
</code></pre></div>    </div>
    <p>적용시 모듈을 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export class AppModule {}
=&gt;
export class AppModule implements NestModule {
configure(consumer: MiddlewareConsumer) {
  consumer.apply(MiddlewareNameMiddleware).forRoutes('*');
}
}
</code></pre></div>    </div>
  </li>
  <li>필터
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g filter filter-name
</code></pre></div>    </div>
    <p>개별 적용시 컨트롤러를 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Get()
@UseFilters(HttpExceptionFilter)
getAllCat() {
  throw new HttpException({ koko: 'fail' }, HttpStatus.FORBIDDEN);
  return 'all cat';
}
</code></pre></div>    </div>
    <p>전체 적용시 메인을 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const app = await NestFactory.create(AppModule);
app.useGlobalFilters(new HttpExceptionFilter());
await app.listen(3000);
</code></pre></div>    </div>
  </li>
  <li>파이프
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g pipe pipe-name
</code></pre></div>    </div>
    <p>파라메터 적용시 아래와같이 수정</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Get(':id')
getOneCat(@Param('id', ParseIntPipe) id: number) {
  return 'one cat';
}
</code></pre></div>    </div>
    <p>커스텀 파이프작성시 아래와 같이 생성</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Injectable()
export class PostiveIntPipe implements PipeTransform {
  transform(value: any, metadata: ArgumentMetadata) {
      if (value &lt; 0) {
        throw new HttpException();
      }
      return value;
  }
}
</code></pre></div>    </div>
  </li>
  <li>인터셉터(AOP)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nest g interceptor interceptor-name
</code></pre></div>    </div>
    <p>인터셉터 적용시 아래와 같이 사용</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Get('test2')
@UseInterceptors(InterceptorNameInterceptor)
getHello2(@Param() param: { id: string }): string {
  return this.catsService.getHello();
}
</code></pre></div>    </div>
    <p>인터셉터 구현</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Injectable()
export class InterceptorNameInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt; {
      return next.handle().pipe(map((data) =&gt; ({ success: true, data })));
  }
}
</code></pre></div>    </div>
  </li>
  <li>라이프사이클
    <ul>
      <li>글로벌 -&gt; 개별</li>
      <li>request -&gt; middleware -&gt; guard -&gt; interceptor -&gt; pipe -&gt; controller</li>
    </ul>
  </li>
</ul>

<hr />
<h2 id="4-실행">4) 실행</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ yarn start
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ yarn start:dev
</code></pre></div></div>]]></content><author><name>zaimy</name></author><category term="development" /><category term="nestjs" /><summary type="html"><![CDATA[1. 프로젝트 생성과 구성 1) 프로젝트 생성 $ yarn add @nestjs/cli $ nest new 프로젝트명 (yarn선택) 2) Nest 기본구성 모듈 $ nest g mo module-name 외부로 서비스를 공개하고 싶을경우 export 추가 @Module({ controllers: [CatsController], providers: [CatsService], exports: [CatsService], }) export class CatsModule {} 컨트롤러 $ nest g co controller-name 서비스 $ nest g service service-name 3) Nest 응용구성 미들웨어 $ nest g middleware middleware-name 적용시 모듈을 아래와같이 수정 export class AppModule {} =&gt; export class AppModule implements NestModule { configure(consumer: MiddlewareConsumer) { consumer.apply(MiddlewareNameMiddleware).forRoutes('*'); } } 필터 $ nest g filter filter-name 개별 적용시 컨트롤러를 아래와같이 수정 @Get() @UseFilters(HttpExceptionFilter) getAllCat() { throw new HttpException({ koko: 'fail' }, HttpStatus.FORBIDDEN); return 'all cat'; } 전체 적용시 메인을 아래와같이 수정 const app = await NestFactory.create(AppModule); app.useGlobalFilters(new HttpExceptionFilter()); await app.listen(3000);]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nest_logo.png" /><media:content medium="image" url="http://localhost:4000/nest_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>